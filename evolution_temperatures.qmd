---
title: "Dynamiques des températures LANDSAT et ASTER sur la période [2016-2024] dans quelques favelas"
format: 
  html:
    fig-width: 25
    fig-height: 25
---

```{r warning=FALSE, message=FALSE, error=TRUE}
#| echo: false
#| output: false

# chargement des packages nécessaires
base::library(tidyverse) # tidy data manipulation in R
base::library(raster)    # raster data manipulation
base::library(sf)        # vector data manipulation

# chargement du fichier vectoriel {shp} de la région d'intéret (en UTM)
favelas<- sf::read_sf("../../favelas/favelas.shp")

# reprojection de la couche en WGS 84 / UTM zone 23N
favelas<- sf::st_transform(favelas, 32623)

# sélection des favelas pour lesquelles les statistiques seront calculées
selected_favelas<- dplyr::filter(
  favelas, nome %in% c("Rocinha", "Vila Joaniza", "Bairro da Pedreira", "Fazenda Coqueiro", "Nova Cidade")
)
```

<!-- CALCUL DES STATISTIQUES DES BANDS LANDSAT -->

```{r warning=FALSE, message=FALSE, error=TRUE}
#| echo: false
#| output: false

# fonction de calcul des statistiues sur les températures LANDSAT
# définition d'une fonction pour découper les bandes en fonction de la couche 
# vectorielle de la région d'intéret (ROI)
temperature_stats<- function(bands_folder_path, favelas_db){
  #-----------------------------------------------------------------------|
  #* PARAMETERS
  #* favelas_db : shapefile contenant les noms des favelas
  #* bands_folder_path : dossier contenant les bandes spectrales à découper
  #-----------------------------------------------------------------------|
  
  if(stringr::str_detect(bands_folder_path, pattern="LC*")){
    # repertoire de stockage des images découpés
    # Replace default system slash, assume spn was generated by system.
    ls_srt_folders_file <- base::strsplit(bands_folder_path, .Platform$file.sep)[[1]]
    # extraire le nom du dossier de l'image
    image_folder_name<- utils::tail(ls_srt_folders_file, n=1)
    
    # Vérification/Création du dossier global de stockage des résultats du  décopage
    # if(!dir.exists("./landsat/Images-Selectionnees/IMAGES-DECOUPEES"))
    # {
    #   dir.create("./landsat/Images-Selectionnees/IMAGES-DECOUPEES")
    # }
    
    # Création du dossier global de stockage de chaque image
    # if(!base::dir.exists(
    #   base::paste0("./landsat/Images-Selectionnees/IMAGES-DECOUPEES/", image_folder_name)
    # ))
    # {
    #   base::dir.create(
    #     base::paste0("./landsat/Images-Selectionnees/IMAGES-DECOUPEES/", image_folder_name)
    #   )
    # }
    
    # chemins absolus de le la bande 10 (température de surface)
    b10_tif<- base::paste0(
      bands_folder_path, "/", base::list.files(bands_folder_path, pattern="B10.TIF$")
    )

    # date de l'image
    img_date<- base::substr(image_folder_name, 18, 25)
    
    # chargement du fichier tif
    B10<- raster::raster(b10_tif)

    # initialiser un dataframe résultat
    init_df<- tibble::tibble(
      Date = base::character(),
      Favelas =  base::character(),
      Moyenne = base::double(),
      Mediane = base::double(),
      Ecart.Type = base::double(),
      Min. = base::double(),
      Max. = base::double(),
      NB_pixel = base::double()
    )
    
    # itération sur chaque favelas pour calculer les températures moyennes
    for (fav in favelas_db$nome) # pour chaque fichier tif du dossier
    {
      # sélection de la favela dans la table des favelas
      favelas_in_process<- dplyr::filter(favelas_db, nome==fav)

      # découper l'image  en utilisant l'étendue du vecteur de zone d'intérêt
      cropped_rast<- raster::crop(B10, favelas_in_process)
      
      # masker l'image découper
      masked_rast <- raster::mask(cropped_rast, favelas_in_process)
      
      # calculer les statistiques
      fav_stats<-  data.frame(
        Date = img_date,
        Favelas = fav,
        Moyenne = base::mean(masked_rast[], na.rm=TRUE),
        Mediane = stats::median(masked_rast[], na.rm=TRUE),
        Ecart.Type = stats::sd(masked_rast[], na.rm=TRUE),
        Min. = base::min(masked_rast[], na.rm=TRUE),
        Max. = base::max(masked_rast[], na.rm=TRUE),
        NB_pixel = base::length(stats::na.omit(masked_rast[]))
      )
      
      # ajout à la tabl initialisé
      init_df<- dplyr::bind_rows(init_df, fav_stats)
    }
    
    # return
    base::return(init_df)
  }
}

# créer une liste de tous les sous-dossiers du repertoire global landsat
images_folders_list<- base::list.dirs(
  base::paste0("../../landsat/Images-Selectionnees/IMAGES-DECOUPEES"), recursive=F
)[-1]

#--------------------------------------------------------------|
# calculer les stats sur toutes les dates
# initialiser un data.frame pour contenir les statistiques
statistics_results<- tibble::tibble(
  Date = base::character(),
  Favelas =  base::character(),
  Moyenne = base::double(),
  Mediane = base::double(),
  Ecart.Type = base::double(),
  Min. = base::double(),
  Max. = base::double(),
  NB_pixel = base::double()
)

# loop
for(fold in images_folders_list)
{
  statistics_results <- dplyr::bind_rows(
    statistics_results, temperature_stats(fold, selected_favelas)
  )
}

# formatter la date
statistics_results<- dplyr::mutate(
  statistics_results, Date = lubridate::ymd(Date)
)

# exporter la table résultat
utils::write.csv2(statistics_results, "./data/landsat_temperature_statistics.csv", row.names=FALSE)
```


<!-- CALCUL DES STATISTIQUES DES BANDS ASTER -->

```{r warning=FALSE, message=FALSE, error=TRUE}
#| echo: false
#| output: false

# initialiser un dataframe résultat
results_df<- tibble::tibble(
  Date = base::character(),
  Favelas =  base::character(),
  Moyenne = base::double(),
  Mediane = base::double(),
  Ecart.Type = base::double(),
  Min. = base::double(),
  Max. = base::double(),
  NB_pixel = base::double()
)

for(i in 1:length(base::unique(selected_favelas$nome))){# pour chaque favelas
  # favela name
  favela<- base::unique(selected_favelas$nome[i])
  # cat(favela, "------------------------", "|\n")

  # listes des fichiers tifs
  tif_files<- base::paste0(
    base::paste0("../../ASTER/ASTER_reprojected/IMAGES-DECOUPEES-CORRIGEES/Par-Favelas/", favela), "/",
    list.files(
      base::paste0("../../ASTER/ASTER_reprojected/IMAGES-DECOUPEES-CORRIGEES/Par-Favelas/", favela),
      pattern="tif$"
    )
  )

  # initialiser un dataframe résultat pour cette favelas
  fav_init_df<- tibble::tibble(
    Date = base::character(),
    Favelas =  base::character(),
    Moyenne = base::double(),
    Mediane = base::double(),
    Ecart.Type = base::double(),
    Min. = base::double(),
    Max. = base::double(),
    NB_pixel = base::double()
  )
  
  # parcourir les fichiers tif, les charger et les supprimer s'il ya aucun pixel
  for(tif in tif_files){
    # extraire la date de l'image
    img_date<- base::substr(base::basename(tif), 11, 18)
    img_date<- base::as.character(lubridate::mdy(img_date))

    # chargement du fichier tif
    band<- raster::raster(tif)

    # calculer les statistiques
    fav_stats<-  data.frame(
      Date = img_date,
      Favelas = favela,
      Moyenne = base::mean(band[], na.rm=TRUE),
      Mediane = stats::median(band[], na.rm=TRUE),
      Ecart.Type = stats::sd(band[], na.rm=TRUE),
      Min. = base::min(band[], na.rm=TRUE),
      Max. = base::max(band[], na.rm=TRUE),
      NB_pixel = base::length(stats::na.omit(band[]))
    )
    
    # rajouter ls résultats au data frame {}
    fav_init_df<- dplyr::bind_rows(fav_init_df, fav_stats)
  }
  
  # rajouter le dataframe {fav_stats} au dataframe {results_df}
  results_df<- dplyr::bind_rows(results_df, fav_init_df)
}

# exporter la table résultat
utils::write.csv2(
  results_df, "./data/aster_temperature_statistics.csv", row.names=FALSE
)
```


<!-- COURBES D'EVOLUTION DES TEMPERATURE -->

<!-- LANDSAT -->

```{r warning=FALSE, message=FALSE, error=TRUE}
#| echo: false
#| output: false

# courbe d'évolution des températures
landsat_temperature_line_plot<- statistics_results |>
  group_by(Favelas) |>
  ggplot() +
  geom_line(aes(x=Date, y=Moyenne, color=Favelas), linewidth=.5) +
  # améliorer l'axe des abscisses
  scale_x_date(date_breaks = "1 year", date_labels="%Y", expand=c(0.01, 0.01))+
  scale_y_continuous(expand=c(0.01, 0.01), trans="log",
                     breaks=seq(min(statistics_results$Moyenne),
                                max(statistics_results$Moyenne),
                                length.out=10),
                     labels=function(x) round(x))+
  # la légende
  ggplot2::guides(
    color = ggplot2::guide_legend(
      override.aes=list(linewidth=1.5, size = 3)
    )
  ) +
  # défnir les couleurs du graphiques
  scale_color_manual(values=c(
    "#ff007f", "green", "cyan", "#6BAED6", "#FEB24C"
  )) +
  theme_bw()+
  theme(
    strip.background = element_rect(fill="white", color="gray", linewidth=1),
    axis.title=element_blank(),    # omettre l'axe des ordonnées
    axis.text=element_text(size=12, hjust=.5), # étiquette de l'axe des abscisses
    plot.title=element_blank(), # masquer le titre du graphique
    plot.background=element_rect(fill="white", color=NA), # couleur du fond du plan
    plot.margin=margin(rep(.3, 4), unit="cm"),
    # panel.background=element_rect(fill="white", color="gray", linewidth=1),
    panel.spacing.x=unit(3, "cm"),
    panel.spacing.y=unit(10, "cm"),
    # panel.grid=element_line(color="gray", linewidth=.35),
    legend.position=c(.94, .08),
    legend.title=element_blank(),
    legend.text=element_text(size=12, margin=margin(l=-.02, unit="cm")),
    legend.key=element_blank(),
    legend.background=element_blank()
  )
```


<!-- ASTER -->

```{r warning=FALSE, message=FALSE, error=TRUE}
#| echo: false

# courbe d'évolution des températures
aster_temperature_line_plot<- results_df |>
  dplyr::mutate(Date = base::as.Date(Date)) |>
  group_by(Favelas) |>
  ggplot() +
  geom_line(aes(x=Date, y=Moyenne, color=Favelas), linewidth=.5) +
  # améliorer l'axe des abscisses
  scale_x_date(
    date_breaks = "1 year", date_labels="%Y", expand=c(0.01, 0.01)
  )+
  scale_y_continuous(expand=c(0.01, 0.01), trans="log",
                     breaks=seq(min(statistics_results$Moyenne),
                                max(statistics_results$Moyenne),
                                length.out=10),
                     labels=function(x) round(x))+
  # la légende
  ggplot2::guides(
    color = ggplot2::guide_legend(
      override.aes=list(linewidth=1.5, size = 3)
    )
  ) +
  # défnir les couleurs du graphiques
  scale_color_manual(values=c(
    "#ff007f", "green", "cyan", "#6BAED6", "#FEB24C"
  )) +
  theme_bw()+
  theme(
    strip.background = element_rect(fill="white", color="gray", linewidth=1),
    axis.title=element_blank(),    # omettre l'axe des ordonnées
    axis.text=element_text(size=12, hjust=.5), # étiquette de l'axe des abscisses
    plot.title=element_blank(), # masquer le titre du graphique
    plot.background=element_rect(fill="white", color=NA), # couleur du fond du plan
    plot.margin=margin(rep(.3, 4), unit="cm"),
    # panel.background=element_rect(fill="white", color="gray", linewidth=1),
    panel.spacing.x=unit(3, "cm"),
    panel.spacing.y=unit(10, "cm"),
    # panel.grid=element_line(color="gray", linewidth=.35),
    legend.position=c(.94, .08),
    legend.title=element_blank(),
    legend.text=element_text(size=12, margin=margin(l=-.02, unit="cm")),
    legend.key=element_blank(),
    legend.background=element_blank()
  )
```


<!-- ASTER VS LANDSAT -->

```{r warning=FALSE, message=FALSE, error=TRUE}
#| echo: false

# combiner les tables LANDSAT et ASTER
landsat_and_aster<- dplyr::bind_rows(
  statistics_results |> dplyr::mutate(Produit = "LANDSAT"),
  results_df |> dplyr::mutate(Produit = "ASTER", Date=base::as.Date(Date))
)

# courbe d'évolution des températures
landsat_and_aster_temperature_line_plot<- landsat_and_aster |>
  ggplot() +
  geom_line(aes(x=Date, y=Moyenne, color=Produit), linewidth=.6) +
  # améliorer l'axe des abscisses
  scale_x_date(
    date_breaks = "2 year", date_labels="%Y", expand=c(0.01, 0.01),
    limits=c(as.Date("2016-01-01"), as.Date("2024-07-31"))
  )+
  scale_y_continuous(expand=c(0.01, 0.01), trans="log",
                     breaks=seq(min(statistics_results$Moyenne),
                                max(statistics_results$Moyenne),
                                length.out=10),
                     labels=function(x) round(x))+
  # la légende
  ggplot2::guides(
    color = ggplot2::guide_legend(
      override.aes=list(linewidth=1.5, size = 3)
    )
  ) +
  # défnir les couleurs du graphiques
  scale_color_manual(values=c(
    "#ff007f", "#6BAED6"
    #, "#FEB24C", "green", "cyan"
  )) +
  facet_wrap(vars(Favelas), nrow=2, scales="free_x") +
  theme_bw()+
  theme(
    strip.background = element_rect(fill="white", color="gray", linewidth=1),
    axis.title=element_blank(),    # omettre l'axe des ordonnées
    axis.text=element_text(size=12, hjust=.5), # étiquette de l'axe des abscisses
    plot.title=element_blank(), # masquer le titre du graphique
    plot.background=element_rect(fill="white", color=NA), # couleur du fond du plan
    plot.margin=margin(rep(.3, 4), unit="cm"),
    # panel.background=element_rect(fill="white", color="gray", linewidth=1),
    panel.spacing.x=unit(3, "cm"),
    panel.spacing.y=unit(10, "cm"),
    # panel.grid=element_line(color="gray", linewidth=.35),
    legend.position=c(.94, .08),
    legend.title=element_blank(),
    legend.text=element_text(size=12, margin=margin(l=-.02, unit="cm")),
    legend.key=element_blank(),
    legend.background=element_blank()
  )
```



::: {.panel-tabset}

# LANDSAT

```{r error=TRUE, warning=FALSE, message=FALSE}
#| echo: false

plotly::ggplotly(landsat_temperature_line_plot)
```

# ASTER

```{r error=TRUE, warning=FALSE, message=FALSE}
#| echo: false

plotly::ggplotly(aster_temperature_line_plot)
```

# Superposition ASTER et LANDSAT

```{r error=TRUE, warning=FALSE, message=FALSE}
#| echo: false

plotly::ggplotly(landsat_and_aster_temperature_line_plot)
```

:::

::: {.callout-note collapse="true" title="Développer pour voir les données"}

::: {.panel-tabset}

## Table LANDSAT

{{< downloadthis data/landsat_temperature_statistics.csv dname="landsat_temperature_statistics.csv" label="Télécharger les données" >}}

```{r warning=FALSE, message=FALSE}
#| label: tbl-temp-landsat
#| tbl-cap: Statistiques des températures LANDSAT dans quelques Favelas
#| echo: false

kableExtra::kable(statistics_results) |>
kableExtra::kable_styling(font_size = 16)
```

## Table ASTER

{{< downloadthis data/aster_temperature_statistics.csv dname="aster_temperature_statistics.csv" label="Télécharger les données" >}}

```{r warning=FALSE, message=FALSE}
#| label: tbl-temp-aster
#| tbl-cap: Statistiques des températures ASTER dans quelques Favelas
#| echo: false

kableExtra::kable(results_df) |>
kableExtra::kable_styling(font_size = 16)
```

:::

:::